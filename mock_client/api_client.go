// Code generated by MockGen. DO NOT EDIT.
// Source: client/api_client.go
//
// Generated by this command:
//
//	mockgen -source=client/api_client.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	model "github.com/iho/dispatcher/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIFetchUsersClient is a mock of APIFetchUsersClient interface.
type MockAPIFetchUsersClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIFetchUsersClientMockRecorder
	isgomock struct{}
}

// MockAPIFetchUsersClientMockRecorder is the mock recorder for MockAPIFetchUsersClient.
type MockAPIFetchUsersClientMockRecorder struct {
	mock *MockAPIFetchUsersClient
}

// NewMockAPIFetchUsersClient creates a new mock instance.
func NewMockAPIFetchUsersClient(ctrl *gomock.Controller) *MockAPIFetchUsersClient {
	mock := &MockAPIFetchUsersClient{ctrl: ctrl}
	mock.recorder = &MockAPIFetchUsersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIFetchUsersClient) EXPECT() *MockAPIFetchUsersClientMockRecorder {
	return m.recorder
}

// FetchUsers mocks base method.
func (m *MockAPIFetchUsersClient) FetchUsers(ctx context.Context, url string) (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUsers", ctx, url)
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUsers indicates an expected call of FetchUsers.
func (mr *MockAPIFetchUsersClientMockRecorder) FetchUsers(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUsers", reflect.TypeOf((*MockAPIFetchUsersClient)(nil).FetchUsers), ctx, url)
}

// MockAPIPushUsersClient is a mock of APIPushUsersClient interface.
type MockAPIPushUsersClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIPushUsersClientMockRecorder
	isgomock struct{}
}

// MockAPIPushUsersClientMockRecorder is the mock recorder for MockAPIPushUsersClient.
type MockAPIPushUsersClientMockRecorder struct {
	mock *MockAPIPushUsersClient
}

// NewMockAPIPushUsersClient creates a new mock instance.
func NewMockAPIPushUsersClient(ctrl *gomock.Controller) *MockAPIPushUsersClient {
	mock := &MockAPIPushUsersClient{ctrl: ctrl}
	mock.recorder = &MockAPIPushUsersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIPushUsersClient) EXPECT() *MockAPIPushUsersClientMockRecorder {
	return m.recorder
}

// PushUsers mocks base method.
func (m *MockAPIPushUsersClient) PushUsers(ctx context.Context, users model.PushUsers, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushUsers", ctx, users, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushUsers indicates an expected call of PushUsers.
func (mr *MockAPIPushUsersClientMockRecorder) PushUsers(ctx, users, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushUsers", reflect.TypeOf((*MockAPIPushUsersClient)(nil).PushUsers), ctx, users, url)
}
